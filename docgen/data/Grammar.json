{
  "class": "rita.RiGrammar",
  "fields": [],
  "statics": [
    {
      "name": "fromJSON",
      "example": "rg = RiGrammar.fromJSON(grammarRules);",
      "description": "Creates a new grammar object from a JSON string",
      "syntax": "RiGrammar.fromJSON(grammarRules);<br>RiGrammar.fromJSON(grammarRules, context);",
      "parameters": [
        {
          "type": "String",
          "desc": "a JSON representation of the grammar"
        },
        {
          "type": "Object<br>(or Map in Java)",
          "desc": "the context for any referenced variables or functions (optional)"
        }
      ],
      "returns": [
        {
          "type": "RiGrammar",
          "desc": "this RiGrammar object"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "addRule",
      "example": "rg = new RiGrammar();<br/>rg.addRule(\"start\", \"\\$animal\");<br/>rg.addRule(\"animal\", \"cat | dog | chicken\");",
      "description": "Adds a rule to the existing grammar, replacing any existing rule with the same name",
      "syntax": "addRule(name, definition);",
      "parameters": [
        {
          "type": "String",
          "desc": "the rule name"
        },
        {
          "type": "String or String[]",
          "desc": "the rule definition"
        }
      ],
      "returns": [
        {
          "type": "RiGrammar",
          "desc": "this RiGrammar"
        }
      ]
    },
    {
      "name": "expand",
      "example": "rg = new RiGrammar(rules); <br/>result = rg.expand(ruleName);",
      "description": "Expands a grammar from the supplied rule. If no rule is provided the \\$start and #60;start&#62;' symbols will be checked respectively.",
      "syntax": "expand();<br/>expand(context);",
      "parameters": [
        {
          "type": "String",
          "desc": "the rule name to be expanded (optional)"
        },
        {
          "type": "Object<br>(or Map in Java)",
          "desc": "the context for any referenced variables or functions (optional)"
        }
      ],
      "returns": [
        {
          "type": "String",
          "desc": "the result of the expansion (or an error if the rule is not found)"
        }
      ]
    },
    {
      "name": "removeRule",
      "example": "rg = new RiGrammar(); <br>rg.addRule(\"pet\", \"dog | hawk | crow\", 1); <br>rg.removeRule(\"pet\");",
      "description": "Deletes the named rule from the grammar",
      "syntax": "removeRule(name);",
      "parameters": [
        {
          "type": "String",
          "desc": "the rule name"
        }
      ],
      "returns": [
        {
          "type": "RiGrammar",
          "desc": "this RiGrammar"
        }
      ]
    },
    {
      "name": "addRules",
      "example": "rg = new RiGrammar(); <br>rg.addRules(rules);",
      "description": "Loads a grammar from an object (or Map in Java).",
      "syntax": "rg.addRules(grammarRules);",
      "parameters": [
        {
          "type": "Object<br>(or Map in Java)",
          "desc": "an object representation of the grammar"
        }
      ],
      "returns": [
        {
          "type": "RiGrammar",
          "desc": "this RiGrammar"
        }
      ]
    },
    {
      "name": "toString",
      "example": "rm = new RiGrammar(rules);<br/>s = rm.toString();",
      "description": "Returns a formatted version of this grammar",
      "syntax": "rg.toString();",
      "parameters": [],
      "returns": [
        {
          "type": "String",
          "desc": "the object as a String"
        }
      ]
    },
    {
      "name": "toJSON",
      "example": "rg = new RiGrammar(rules);<br/>json = rg.toJSON();",
      "description": "Return a formatted version of this grammar.",
      "syntax": "rg.toJSON();",
      "parameters": [
        {
          "type": "String",
          "desc": "beautify or not (optional, default=false)"
        }
      ],
      "returns": [
        {
          "type": "String",
          "desc": "the grammar as a json string"
        }
      ]
    }
  ]
}