{
  "class": "rita.Grammar",
  "fields": [],
  "statics": [
    {
      "name": "fromJSON",
      "example": "rg = Grammar.fromJSON(grammarRules);",
      "description": "Loads a grammar from a JSON object or string",
      "syntax": "Grammar.fromJSON(grammarRules);<br>Grammar.fromJSON(grammarRules, context);",
      "parameters": [
        {
          "type": "String or Object",
          "desc": "a String or JSON object representation of the grammar"
        },
        {
          "type": "Object<br>(or Map in Java)",
          "desc": "the context for any referenced variables or functions (optional)"
        }
      ],
      "returns": [
        {
          "type": "Grammar",
          "desc": "this Grammar object"
        }
      ],
      "related": "",
      "platform": "Java / JavaScript",
      "note": ""
    }
  ],
  "functions": [
    {
      "name": "Grammar",
      "example": "let rg = new Grammar();<br>rg.addRule(\"$start\",\"(cat | dog | fish)\");<br>let result = rg.expand();",
      "description": "A probabilistic context-free grammar with literary extensions for text-generation<br><br><pre class=\"margin\">rg = new Grammar(ObjectOrMapInJava);<br>result = rg.expand();</pre>RiTa grammars are valid<a href=\"http://json.org\" target=\"new\">JSON </a> or <a herf=\"http://keleshev.com/yaml-quick-introduction\" target=\"new\">YAML</a>formatted strings (or objects), as follows<pre class=\"margin\">{<br> \"&lt;start&gt;\": [ \"&lt;rule1&gt;\", \"&lt;rule2&gt;\", \"&lt;rule3&gt;\" ],<br><br>  \"&lt;rule2&gt;\": [ \"terminal1\", \"terminal2\", \"&lt;rule1&gt;\" ],<br>  ...<br>}</pre>OR (in YAML, where quotes are generally not needed)<br><pre class=\"margin\">&lt;start&gt;: [ &lt;rule1&gt;, &lt;rule2&gt;, &lt;rule3&gt; ]<br><br>&lt;rule2&gt;: [ terminal1, terminal2, &lt;rule1&gt; ]<br>...</pre> <br><li><a href=\"http://keleshev.com/yaml-quick-introduction\" target=\"new\">YAML</a> is a human-friendly superset of JSON, which may be more convenient to use if you're writing your grammar as a string. If you're working in JavaScript, you can alternatively just pass a JavaScript/JSON object instead. If you're not sure whether your grammar is valid YAML or JSON, you can check it at<a href='http://yamllint.com/' target=\"new\"> yamllint.com</a> or <a target=\"new\" href='http://jsonlint.com/'> jsonlint.com</a>.<br><br><li>A RiGrammar object will assign (by default) equal weights to all choices in a rule. One can adjust the weights by adding 'multipliers' as follows: (in the rule below, 'terminal1' will be chosen twice as often as the 2 other choices.<p><pre class=\"margin\">&lt;rule2&gt;: terminal1 [2] | terminal2 | &lt;rule1&gt;</pre><br><br><li>The RiGrammar object supports callbacks, from your grammar, back into your code. To generate a callback, add the method call in your grammar, surrounded by back-ticks, as follows: <p><pre class=\"margin\">&lt;rule2&gt;:<br>- The cat ran after the `randomNoun()`<br>- The cat ran after the `pluralize('cat')`<br>- The &lt;noun&gt; ran after the `pluralize(&lt;noun&gt;)`</pre>",
      "syntax": "// Initialize an empty Grammar object<br><br>rg = new Grammar();<br><br>//Or specify a grammar in a YAML/JSON object<br><br>rg = Grammar(myJsonObject);<br><br>//Or with context<br><br>rg = Grammar(myJsonObject, context);",
      "parameters": [
        {
          "type": "Object<br>(or Map in Java)",
          "desc": "the YAML/JSON grammar"
        },
        {
          "type": "Object<br>(or Map in Java)",
          "desc": "context (optional)"
        }
      ],
      "returns":[
        {
          "type": "Grammar",
          "desc": "a Grammar obejct"
        }
      ],
      "platform": "Java / JavaScript"
    },
    {
      "name": "addRule",
      "example": "rg = new Grammar();<br/>rg.addRule(\"start\", \"\\$animal\");<br/>rg.addRule(\"animal\", \"cat | dog | chicken\");",
      "description": "Adds a rule to the existing grammar, replacing any existing rule with the same name",
      "syntax": "addRule(name, definition);",
      "parameters": [
        {
          "type": "String",
          "desc": "the rule name"
        },
        {
          "type": "String or String[]",
          "desc": "the rule definition"
        }
      ],
      "returns": [
        {
          "type": "Grammar",
          "desc": "this Grammar"
        }
      ],
      "related": "",
      "platform": "Java / JavaScript",
      "note": ""
    },
    {
      "name": "expand",
      "example": "rg = new Grammar(rules); <br/>result = rg.expand(ruleName);",
      "description": "Expands a grammar from the supplied rule. If no rule is provided the \\$start and #60;start&#62;' symbols will be checked respectively.",
      "syntax": "expand();<br/>expand(context);",
      "parameters": [
        {
          "type": "String",
          "desc": "the rule name to be expanded (optional)"
        },
        {
          "type": "Object<br>(or Map in Java)",
          "desc": "the context for any referenced variables or functions (optional)"
        }
      ],
      "returns": [
        {
          "type": "String",
          "desc": "the result of the expansion (or an error if the rule is not found)"
        }
      ],
      "related": "",
      "platform": "Java / JavaScript",
      "note": ""
    },
    {
      "name": "removeRule",
      "example": "rg = new Grammar(); <br>rg.addRule(\"pet\", \"dog | hawk | crow\", 1); <br>rg.removeRule(\"pet\");",
      "description": "Deletes the named rule from the grammar",
      "syntax": "removeRule(name);",
      "parameters": [
        {
          "type": "String",
          "desc": "the rule name"
        }
      ],
      "returns": [
        {
          "type": "Grammar",
          "desc": "this Grammar"
        }
      ],
      "related": "",
      "platform": "Java / JavaScript",
      "note": ""
    },
    {
      "name": "addRules",
      "example": "rg = new Grammar(); <br>rg.addRules(rules);",
      "description": "Loads a grammar from an object (or Map in Java).",
      "syntax": "rg.addRules(grammarRules);",
      "parameters": [
        {
          "type": "Object<br>(or Map in Java)",
          "desc": "an object representation of the grammar"
        }
      ],
      "returns": [
        {
          "type": "Grammar",
          "desc": "this Grammar"
        }
      ],
      "related": "",
      "platform": "Java / JavaScript",
      "note": ""
    },
    {
      "name": "toString",
      "example": "rm = new Grammar(rules);<br/>s = rm.toString();//return default formatted string<br>s = rm.toString('/'); //return a string with '/' marking the end of each rule",
      "description": "Returns a formatted version of this grammar",
      "syntax": "rg.toString();",
      "parameters": [
        {
          "type": "String",
          "desc": "a String or a char to mark the end of each rule"
        }
      ],
      "returns": [
        {
          "type": "String",
          "desc": "this object as a String"
        }
      ],
      "related": "",
      "platform": "Java / JavaScript",
      "note": ""
    },
    {
      "name": "toJSON",
      "example": "rg = new Grammar(rules);<br/>json = rg.toJSON();",
      "description": "Return a formatted version of this grammar.",
      "syntax": "rg.toJSON();",
      "parameters": [
        {
          "type": "String",
          "desc": "beautify or not (optional, default=false)"
        }
      ],
      "returns": [
        {
          "type": "String",
          "desc": "the grammar as a json string"
        }
      ],
      "related": "",
      "platform": "Java / JavaScript",
      "note": ""
    }
  ],
  "classDesc": [
    {
      "description": "A probabilistic context-free grammar with literary extensions for text-generation<br><br><pre class=\"margin\">rg = new Grammar(ObjectOrMapInJava);<br>result = rg.expand();</pre>RiTa grammars are valid<a href=\"http://json.org\" target=\"new\">JSON </a> or <a herf=\"http://keleshev.com/yaml-quick-introduction\" target=\"new\">YAML</a>formatted strings (or objects), as follows<pre class=\"margin\">{<br> \"&lt;start&gt;\": [ \"&lt;rule1&gt;\", \"&lt;rule2&gt;\", \"&lt;rule3&gt;\" ],<br><br>  \"&lt;rule2&gt;\": [ \"terminal1\", \"terminal2\", \"&lt;rule1&gt;\" ],<br>  ...<br>}</pre>OR (in YAML, where quotes are generally not needed)<br><pre class=\"margin\">&lt;start&gt;: [ &lt;rule1&gt;, &lt;rule2&gt;, &lt;rule3&gt; ]<br><br>&lt;rule2&gt;: [ terminal1, terminal2, &lt;rule1&gt; ]<br>...</pre> <br><li><a href=\"http://keleshev.com/yaml-quick-introduction\" target=\"new\">YAML</a> is a human-friendly superset of JSON, which may be more convenient to use if you're writing your grammar as a string. If you're working in JavaScript, you can alternatively just pass a JavaScript/JSON object instead. If you're not sure whether your grammar is valid YAML or JSON, you can check it at<a href='http://yamllint.com/' target=\"new\"> yamllint.com</a> or <a target=\"new\" href='http://jsonlint.com/'> jsonlint.com</a>.<br><br>;<li>A RiGrammar object will assign (by default) equal weights to all choices in a rule. One can adjust the weights by adding 'multipliers' as follows: (in the rule below, 'terminal1' will be chosen twice as often as the 2 other choices.<p><pre class=\"margin\">&lt;rule2&gt;: terminal1 [2] | terminal2 | &lt;rule1&gt;</pre><br><br><li>The RiGrammar object supports callbacks, from your grammar, back into your code. To generate a callback, add the method call in your grammar, surrounded by back-ticks, as follows: <p><pre class=\"margin\">&lt;rule2&gt;:<br>- The cat ran after the `randomNoun()`<br>- The cat ran after the `pluralize('cat')`<br>- The &lt;noun&gt; ran after the `pluralize(&lt;noun&gt;)`</pre>",
      "example": "let rg = new Grammar();<br>rg.addRule(\"$start\",\"(cat | dog | fish)\");<br>let result = rg.expand();",
      "parameters": [
        {
          "type": "Object<br>(or Map in Java)",
          "desc": "the YAML/JSON grammar"
        },
        {
          "type": "Object<br>(or Map in Java)",
          "desc": "context (optional)"
        }
      ],
      "returns":[],
      "syntax": "// Initialize an empty Grammar object<br><br>rg = new Grammar();<br><br>//Or specify a grammar in a YAML/JSON object<br><br>rg = Grammar(myJsonObject);<br><br>//Or with context<br><br>rg = Grammar(myJsonObject, context);",
      "platform": "Java / JavaScript"
    }
  ]
}